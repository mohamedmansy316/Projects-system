1704231411
waR3U4bTeM%3Abe1c335a39bbfa04e419acc05717d516-12051a6b3920c8346d855ad73f20cad9
s:5876:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjEyMDUxYTZiMzkyMGM4MzQ2ZDg1NWFkNzNmMjBjYWQ5IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTk6ImF1dGhvcml6ZS5ibGFkZS5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo1OToidmVuZG9yL2xhcmF2ZWwvcGFzc3BvcnQvcmVzb3VyY2VzL3ZpZXdzL2F1dGhvcml6ZS5ibGFkZS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjM0NjE6IjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlbiI+CjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CgogICAgPHRpdGxlPnt7IGNvbmZpZygnYXBwLm5hbWUnKSB9fSAtIEF1dGhvcml6YXRpb248L3RpdGxlPgoKICAgIDwhLS0gU3R5bGVzIC0tPgogICAgPGxpbmsgaHJlZj0ie3sgYXNzZXQoJy9jc3MvYXBwLmNzcycpIH19IiByZWw9InN0eWxlc2hlZXQiPgoKICAgIDxzdHlsZT4KICAgICAgICAucGFzc3BvcnQtYXV0aG9yaXplIC5jb250YWluZXIgewogICAgICAgICAgICBtYXJnaW4tdG9wOiAzMHB4OwogICAgICAgIH0KCiAgICAgICAgLnBhc3Nwb3J0LWF1dGhvcml6ZSAuc2NvcGVzIHsKICAgICAgICAgICAgbWFyZ2luLXRvcDogMjBweDsKICAgICAgICB9CgogICAgICAgIC5wYXNzcG9ydC1hdXRob3JpemUgLmJ1dHRvbnMgewogICAgICAgICAgICBtYXJnaW4tdG9wOiAyNXB4OwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgfQoKICAgICAgICAucGFzc3BvcnQtYXV0aG9yaXplIC5idG4gewogICAgICAgICAgICB3aWR0aDogMTI1cHg7CiAgICAgICAgfQoKICAgICAgICAucGFzc3BvcnQtYXV0aG9yaXplIC5idG4tYXBwcm92ZSB7CiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTVweDsKICAgICAgICB9CgogICAgICAgIC5wYXNzcG9ydC1hdXRob3JpemUgZm9ybSB7CiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZTsKICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5IGNsYXNzPSJwYXNzcG9ydC1hdXRob3JpemUiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgY2FyZC1kZWZhdWx0Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb24gUmVxdWVzdAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gSW50cm9kdWN0aW9uIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPnt7ICRjbGllbnQtPm5hbWUgfX08L3N0cm9uZz4gaXMgcmVxdWVzdGluZyBwZXJtaXNzaW9uIHRvIGFjY2VzcyB5b3VyIGFjY291bnQuPC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBTY29wZSBMaXN0IC0tPgogICAgICAgICAgICAgICAgICAgICAgICBAaWYgKGNvdW50KCRzY29wZXMpID4gMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNjb3BlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+VGhpcyBhcHBsaWNhdGlvbiB3aWxsIGJlIGFibGUgdG86PC9zdHJvbmc+PC9wPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGZvcmVhY2ggKCRzY29wZXMgYXMgJHNjb3BlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57eyAkc2NvcGUtPmRlc2NyaXB0aW9uIH19PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRmb3JlYWNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gQXV0aG9yaXplIEJ1dHRvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSJ7eyByb3V0ZSgncGFzc3BvcnQuYXV0aG9yaXphdGlvbnMuYXBwcm92ZScpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY3NyZgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzdGF0ZSIgdmFsdWU9Int7ICRyZXF1ZXN0LT5zdGF0ZSB9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY2xpZW50X2lkIiB2YWx1ZT0ie3sgJGNsaWVudC0+aWQgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImF1dGhfdG9rZW4iIHZhbHVlPSJ7eyAkYXV0aFRva2VuIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tc3VjY2VzcyBidG4tYXBwcm92ZSI+QXV0aG9yaXplPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBDYW5jZWwgQnV0dG9uIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249Int7IHJvdXRlKCdwYXNzcG9ydC5hdXRob3JpemF0aW9ucy5kZW55JykgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjc3JmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1ldGhvZCgnREVMRVRFJykKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic3RhdGUiIHZhbHVlPSJ7eyAkcmVxdWVzdC0+c3RhdGUgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImNsaWVudF9pZCIgdmFsdWU9Int7ICRjbGllbnQtPmlkIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhdXRoX3Rva2VuIiB2YWx1ZT0ie3sgJGF1dGhUb2tlbiB9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIiPkNhbmNlbDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2JvZHk+CjwvaHRtbD4KIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";